<?xml version="1.0" encoding="UTF-8"?>
<sequence name="com.wso2telco.dep.hub.smsmessagingapi.handle.outbound.requests.Sequence" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <sequence key="com.wso2telco.dep.common.main.request.Sequence" />
    <property name="messageType" scope="axis2" type="STRING" value="application/json" />
    <property expression="json-eval($.outboundSMSMessageRequest.address)" name="address" scope="default" type="STRING" />
    <property expression="fn:normalize-space($ctx:address)" group="1" name="address" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING" />
    <property expression="json-eval($.outboundSMSMessageRequest.outboundSMSTextMessage.message)" name="message" scope="default" type="STRING" />
    <property expression="fn:normalize-space($ctx:message)" group="1" name="message" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING" />
    <property expression="json-eval($.outboundSMSMessageRequest.clientCorrelator)" name="clientCorrelator" scope="default" type="STRING" />
    <property expression="fn:normalize-space($ctx:clientCorrelator)" group="1" name="clientCorrelator" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING" />
    <property expression="json-eval($.outboundSMSMessageRequest.receiptRequest.notifyURL)" name="notifyURL" scope="default" type="STRING" />
    <property expression="fn:normalize-space($ctx:notifyURL)" group="1" name="notifyURL" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING" />
    <property expression="json-eval($.outboundSMSMessageRequest.receiptRequest.callbackData)" name="callbackData" scope="default" type="STRING" />
    <property expression="fn:normalize-space($ctx:callbackData)" group="1" name="callbackData" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING" />
    <!-- validate mandatory parameters of the request -->
    <filter xpath="not(boolean($ctx:message))">
        <then>
            <property expression="fn:concat('message',',')" name="missingParameters" scope="default" type="STRING" />
            <property name="MANDATORY_PARAMETER_VALIDATED" scope="default" type="STRING" value="false" />
        </then>
        <else />
    </filter>
    <filter xpath="not(boolean($ctx:address))">
        <then>
            <property expression="fn:concat($ctx:missingParameters, 'address,')" name="missingParameters" scope="default" type="STRING" />
            <property name="MANDATORY_PARAMETER_VALIDATED" scope="default" type="STRING" value="false" />
        </then>
        <else>
            <script language="js">
                <![CDATA[	var payload = mc.getPayloadJSON();
							var addressArray = payload.outboundSMSMessageRequest.address;
							var addressArrayLength = addressArray.length;
							mc.setProperty("addressArrayLength", addressArrayLength);
				]]>
            </script>
            <filter xpath="$ctx:addressArrayLength > 0">
                <then/>
                <else>
                    <property expression="fn:concat($ctx:missingParameters, 'address,')" name="missingParameters" scope="default" type="STRING" />
                    <property name="MANDATORY_PARAMETER_VALIDATED" scope="default" type="STRING" value="false" />
                </else>
            </filter>
        </else>
    </filter>
    <foreach expression="//outboundSMSMessageRequest/senderAddresses" xmlns:ns="http://org.apache.synapse/xsd">
        <sequence>
            <property expression="json-eval($.senderAddresses.senderAddress)" name="senderAddress" scope="default" type="STRING" />
            <property expression="fn:normalize-space($ctx:senderAddress)" group="1" name="senderAddress" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING" />
            <filter xpath="not(boolean($ctx:senderAddress))">
                <then>
                    <property expression="fn:concat($ctx:missingParameters, 'senderAddress,')" name="missingParameters" scope="default" type="STRING" />
                    <property name="MANDATORY_PARAMETER_VALIDATED" scope="default" type="STRING" value="false" />
                </then>
                <else />
            </filter>
            <property expression="json-eval($.senderAddresses.operatorCode)" name="operatorCode" scope="default" type="STRING" />
            <property expression="fn:normalize-space($ctx:operatorCode)" group="1" name="operatorCode" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING" />
            <filter xpath="not(boolean($ctx:operatorCode))">
                <then>
                    <property expression="fn:concat($ctx:missingParameters, 'operatorCode,')" name="missingParameters" scope="default" type="STRING" />
                    <property name="MANDATORY_PARAMETER_VALIDATED" scope="default" type="STRING" value="false" />
                </then>
                <else />
            </filter>
        </sequence>
    </foreach>
    <filter regex="false" source="get-property('MANDATORY_PARAMETER_VALIDATED')">
        <then>
            <property expression="fn:substring($ctx:missingParameters, 0, fn:string-length($ctx:missingParameters))" name="missingParameters" scope="default" type="STRING" />
            <property name="httpStatusCode" scope="default" type="STRING" value="400" />
            <property name="exceptionType" scope="default" type="STRING" value="SERVICE_EXCEPTION" />
            <property name="messageId" scope="default" type="STRING" value="SVC0002" />
            <property name="errorText" scope="default" type="STRING" value="Invalid input value for message part %1" />
            <filter regex="^false$" source="boolean(fn:contains($ctx:missingParameters, ','))">
                <then>
                    <property expression="fn:concat('Missing mandatory parameter: ', $ctx:missingParameters)" name="errorVariable" scope="default" type="STRING" />
                </then>
                <else>
                    <property expression="fn:concat('Missing mandatory parameters: ', $ctx:missingParameters)" name="errorVariable" scope="default" type="STRING" />
                </else>
            </filter>
            <sequence key="com.wso2telco.dep.common.response.exceptions.Sequence" />
        </then>
        <else />
    </filter>
    <!-- validate msisdn format -->
    <foreach expression="//outboundSMSMessageRequest/address" xmlns:ns="http://org.apache.synapse/xsd">
        <sequence>
            <property expression="json-eval($.address)" name="address" scope="default" type="STRING" />
            <property expression="fn:normalize-space($ctx:address)" group="1" name="address" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING" />
            <call-template target="com.wso2telco.dep.common.msisdnValidator.Template">
                <with-param name="paramName" value="address" />
                <with-param name="paramValue" value="{$ctx:address}" />
            </call-template>
        </sequence>
    </foreach>
    <!-- preserve original payload -->
    <property name="requestJSONPayload" expression="json-eval($.)"/>
    <!-- generating request clientCorrelator -->
    <call-template target="com.wso2telco.dep.common.clientCorrelator.generator.Template">
        <with-param name="clientCorrelator" value="{$ctx:clientCorrelator}" />
    </call-template>
    <!-- save service provider's notify url and generate new notify url from hub -->
    <filter xpath="boolean($ctx:notifyURL)">
        <then>
            <call-template target="com.wso2telco.dep.common.notification.url.readModify.Template">
                <with-param name="notifyURL" value="{$ctx:notifyURL}" />
                <with-param name="apiResourceSuffix" value="/outbound/notification" />
            </call-template>
        </then>
        <else />
    </filter>
    <!-- update clientCorrelator and notifyURL with generated values -->
    <script language="js">
        <![CDATA[	var payload = mc.getPayloadJSON();
					payload.outboundSMSMessageRequest.clientCorrelator = String(mc.getProperty("uniqueClientCorrelator"));
					payload.outboundSMSMessageRequest.receiptRequest.notifyURL = String(mc.getProperty("generatedNotifyURL"));
					var stringifiedPayload = JSON.stringify(payload);
					mc.setPayloadJSON(stringifiedPayload);
		]]>
    </script>
    <sequence key="com.wso2telco.dep.hub.smsmessagingapi.handle.outbound.requests.splitter.Sequence" />
    <sequence key="com.wso2telco.dep.hub.smsmessagingapi.handle.outbound.requests.gather.Sequence" />
</sequence>
