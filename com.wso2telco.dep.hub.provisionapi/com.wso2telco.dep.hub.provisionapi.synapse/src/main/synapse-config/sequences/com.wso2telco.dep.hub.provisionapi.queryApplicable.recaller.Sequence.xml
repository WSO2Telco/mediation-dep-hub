<?xml version="1.0" encoding="UTF-8"?>
<sequence name="com.wso2telco.dep.hub.provisionapi.queryApplicable.recaller.Sequence" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <sequence key="com.wso2telco.dep.common.main.request.Sequence"/>
    <property description="msisdn" expression="$ctx:uri.var.msisdn" name="msisdn" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:msisdn)" name="msisdn" scope="default" type="STRING"/>
    <property description="MSISDN" expression="get-property('msisdn')" name="MSISDN" scope="default" type="STRING"/>
    <property description="mcc" expression="$ctx:query.param.mcc" name="mcc" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:mcc)" name="mcc" scope="default" type="STRING"/>
    <property description="mnc" expression="$ctx:query.param.mnc" name="mnc" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:mnc)" name="mnc" scope="default" type="STRING"/>
    <property description="onBehalfOf" expression="$ctx:query.param.onBehalfOf" name="onBehalfOf" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:onBehalfOf)" name="onBehalfOf" scope="default" type="STRING"/>
    <property description="purchaseCategoryCode" expression="$ctx:query.param.purchaseCategoryCode" name="purchaseCategoryCode" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:purchaseCategoryCode)" name="purchaseCategoryCode" scope="default" type="STRING"/>
    <property description="requestIdentifier" expression="$ctx:query.param.requestIdentifier" name="requestIdentifier" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:requestIdentifier)" name="requestIdentifier" scope="default" type="STRING"/>
    <property description="offset" expression="$ctx:query.param.offset" name="offset" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:offset)" name="offset" scope="default" type="STRING"/>
    <property description="limit" expression="$ctx:query.param.limit" name="limit" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:limit)" name="limit" scope="default" type="STRING"/>
    <!-- load mediation configurations from registry -->
    <property expression="get-property('registry', 'conf:/repository/wso2telco/configurations/mediationConfig.xml')" name="mediationConfig" scope="default" type="OM"/>
    <filter xpath="boolean($ctx:mcc)">
        <then>
            <filter xpath="not(boolean($ctx:mnc))">
                <then>
                    <property name="isMissingMandatoryParam" scope="default" type="STRING" value="true"/>
                    <property expression="fn:concat('mnc',',')" name="missingParameters" scope="default" type="STRING"/>
                </then>
                <else/>
            </filter>
        </then>
        <else/>
    </filter>
    <filter xpath="boolean($ctx:msisdn) and boolean($ctx:requestIdentifier)">
        <then/>
        <else>
            <property name="isMissingMandatoryParam" scope="default" type="STRING" value="true"/>
            <filter xpath="not(boolean($ctx:msisdn))">
                <then>
                    <property expression="fn:concat($ctx:missingParameters, 'msisdn,')" name="missingParameters" scope="default" type="STRING"/>
                </then>
                <else/>
            </filter>
            <filter xpath="not(boolean($ctx:requestIdentifier))">
                <then>
                    <property expression="fn:concat($ctx:missingParameters, 'requestIdentifier,')" name="missingParameters" scope="default" type="STRING"/>
                </then>
                <else/>
            </filter>
        </else>
    </filter>
    <filter regex="true" source="get-property('isMissingMandatoryParam')">
        <then>
            <property expression="fn:substring($ctx:missingParameters, 0, fn:string-length($ctx:missingParameters))" name="missingParameters" scope="default" type="STRING"/>
            <property name="httpStatusCode" scope="default" type="STRING" value="400"/>
            <property name="exceptionType" scope="default" type="STRING" value="SERVICE_EXCEPTION"/>
            <property name="messageId" scope="default" type="STRING" value="SVC0002"/>
            <property name="errorText" scope="default" type="STRING" value="Invalid input value for message part %1"/>
            <property expression="fn:concat('Missing mandatory parameters: ', $ctx:missingParameters)" name="errorVariable" scope="default" type="STRING"/>
            <sequence key="com.wso2telco.dep.common.response.exceptions.Sequence"/>
        </then>
        <else/>
    </filter>
    <!-- validate request identifier length -->
    <call-template target="com.wso2telco.dep.common.lengthValidator.Template">
        <with-param name="paramName" value="requestIdentifier"/>
        <with-param name="paramValue" value="{$ctx:requestIdentifier}"/>
        <!-- retrieve request identifier length from registry -->
        <with-param name="paramValidLength" value="{$ctx:mediationConfig//validationConfig/requestIdentifierLength}"/>
        <with-param name="paramValidationType" value="LT"/>
    </call-template>
    <call-template target="com.wso2telco.dep.common.msisdnValidator.Template">
        <with-param name="paramName" value="msisdn"/>
        <with-param name="paramValue" value="{$ctx:msisdn}"/>
    </call-template>
    <sequence key="com.wso2telco.dep.common.mccMncValidator.Sequence"/>
    <sequence key="com.wso2telco.dep.common.purchase.category.code.validate.Sequence"/>
    <filter regex="false" source="get-property('PURCHASE_CATEGORY_VALIDATED')">
        <then>
            <sequence key="com.wso2telco.dep.common.response.exceptions.Sequence"/>
        </then>
        <else/>
    </filter>
    <!-- generating requestIdentifier -->
    <call-template target="com.wso2telco.dep.common.requestIdentifier.generator.Template">
        <with-param name="requestIdentifier" value="{$ctx:requestIdentifier}"/>
    </call-template>
    <!-- retrieve hub url from registry -->    
    <property expression="$ctx:mediationConfig//huburl" name="HUB_URL" scope="default" type="STRING"/>
    <!-- retrieve operator's endpoint -->
    <sequence key="com.wso2telco.dep.common.endpoint.retriever.Sequence"/>
    <!-- retrieve operator's access token -->
    <sequence key="com.wso2telco.dep.common.select.token.Sequence"/>
    <!-- replace requestIdentifier in resource path from uniqueRequestIdentifier -->
    <sequence key="com.wso2telco.dep.common.replace.service.provider.request.identifier.Sequence"/>
    <filter regex="true" source="get-property('INTERNAL_ERROR')">
        <then>
            <sequence key="com.wso2telco.dep.common.response.exceptions.Sequence"/>
        </then>
        <else/>
    </filter>
    <!-- remove rest url postfix -->
    <property action="remove" name="REST_URL_POSTFIX" scope="axis2"/>
    <!-- send request to operator endpoint -->
    <sequence key="com.wso2telco.dep.common.call.endpoint.Sequence"/>
    <!-- extract response resource url -->
    <script language="js"><![CDATA[var operatorEndpoint = mc.getProperty("OPERATOR_ENDPOINT");
  	var requestIdentifier;
  	var payload = mc.getPayloadJSON();
  	var gatewayRequestIdentifier = payload.serviceList.requestIdentifier;
  	var requestIdentifierArray = gatewayRequestIdentifier.split(":urn:uuid:");
  	if (requestIdentifierArray.length == 2) {
    	requestIdentifier = requestIdentifierArray[0];
	} 
	mc.setProperty("requestIdentifier", requestIdentifier);  	
  	var gatewayResourceURL = payload.serviceList.resourceURL;
  	var gatewayResourcePath = gatewayResourceURL.replace(operatorEndpoint, "");
  	mc.setProperty("GATEWAY_RESOURCE_PATH", gatewayResourcePath);]]>
  </script>
  <!-- replace requestIdentifier in GATEWAY_RESOURCE_PATH from service provider's requestIdentifier -->
  <sequence key="com.wso2telco.dep.common.replace.hub.request.identifier.Sequence"/>
    <script language="js"><![CDATA[var hubURL = mc.getProperty("HUB_URL");
	var apiName = mc.getProperty("API_NAME");
	var apiVersion = mc.getProperty("VERSION");
	var payload = mc.getPayloadJSON();
	payload.serviceList.requestIdentifier = mc.getProperty("requestIdentifier");
	var hubResourceURL = hubURL.concat("/").concat(apiName).concat("/").concat(apiVersion).concat(mc.getProperty("GATEWAY_RESOURCE_PATH"));
	payload.serviceList.resourceURL = hubResourceURL;
	mc.setPayloadJSON(payload);]]></script>
    <sequence key="com.wso2telco.dep.common.main.response.Sequence"/>
</sequence>
